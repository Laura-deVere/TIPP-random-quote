{"version":3,"sources":["mains.js"],"names":["generator","htmlEls","quote","document","getElementById","author","reload","getData","url","proxyurl","fetch","data","method","headers","Accept","body","JSON","stringify","then","response","json","catch","error","console","log","status","randomNum","max","min","num","Math","round","random","searchAuthor","name","quotes","forEach","indexOf","push","displayQuote","length","textContent","text","addEventListener","randomQuote"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAAC,MAAM;AACvB,QAAMC,OAAO,GAAG;AACdC,IAAAA,KAAK,EAAEC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CADO;AAEdC,IAAAA,MAAM,EAAEF,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAFM;AAGdE,IAAAA,MAAM,EAAEH,QAAQ,CAACC,cAAT,CAAwB,QAAxB;AAHM,GAAhB;;AAMA,QAAMG,OAAO,GAAG,YAAY;AAC1B,UAAMC,GAAG,GAAI,6BAAb;AACA,UAAMC,QAAQ,GAAI,sCAAlB;AACA,WAAOC,KAAK,CAACD,QAAQ,GAAGD,GAAZ,EAAkBG,IAAI,GAAG,EAAzB,EAA8B;AACxCC,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAF+B;AAMxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANkC,KAA9B,CAAL,CAQJO,IARI,CAQEC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAVI,EAWJC,KAXI,CAWGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;AACD,KAbI,CAAP;AAcD,GAjBD;;AAmBA,QAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9B;AACA,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,GAAG,GAAGC,GAAvB,IAA8BA,GAAzC,CAAV;AACA,WAAOC,GAAP;AACD,GAJD;;AAMA,QAAMI,YAAY,GAAG,CAACC,IAAD,EAAOvB,IAAP,KAAgB;AACnC;AACA,QAAIwB,MAAM,GAAG,EAAb;AACAxB,IAAAA,IAAI,CAACyB,OAAL,CAAclC,KAAD,IAAW;AACtB,UAAIA,KAAK,CAACG,MAAN,KAAiB,IAAjB,IAAyBH,KAAK,CAACG,MAAN,CAAagC,OAAb,CAAqBH,IAArB,MAA+B,CAAC,CAA7D,EAAgE;AAC9DC,QAAAA,MAAM,CAACG,IAAP,CAAYpC,KAAZ;AACD;AACF,KAJD;AAKA,WAAOqC,YAAY,CAACJ,MAAM,CAACT,SAAS,CAACS,MAAM,CAACK,MAAP,GAAgB,CAAjB,EAAoB,CAApB,CAAV,CAAP,EAA0CL,MAA1C,CAAnB;AACD,GATD;;AAWA,QAAMI,YAAY,GAAG,CAACrC,KAAD,EAAQS,IAAR,KAAiB;AACpCV,IAAAA,OAAO,CAACC,KAAR,CAAcuC,WAAd,GAA4BvC,KAAK,CAACwC,IAAlC;AACAzC,IAAAA,OAAO,CAACI,MAAR,CAAeoC,WAAf,GAA6BvC,KAAK,CAACG,MAAN,GAAeH,KAAK,CAACG,MAArB,GAA8B,SAA3D;AACAJ,IAAAA,OAAO,CAACI,MAAR,CAAesC,gBAAf,CAAgC,OAAhC,EAAyC,MACvCV,YAAY,CAAC/B,KAAK,CAACG,MAAP,EAAeM,IAAf,CADd;AAGD,GAND;;AAQA,QAAMiC,WAAW,GAAG,YAAY;AAC9B,UAAMjC,IAAI,GAAG,MAAMJ,OAAO,EAA1B;AACA,QAAIoB,GAAG,GAAGhB,IAAI,CAAC6B,MAAf;AACA,QAAIR,MAAM,GAAGrB,IAAI,CAACe,SAAS,CAACC,GAAD,EAAM,CAAN,CAAV,CAAjB;AACAY,IAAAA,YAAY,CAACP,MAAD,EAASrB,IAAT,CAAZ;AACD,GALD;;AAOAV,EAAAA,OAAO,CAACK,MAAR,CAAeqC,gBAAf,CAAgC,OAAhC,EAAyCC,WAAzC;AACAA,EAAAA,WAAW;AACZ,CA5DiB,GAAlB","file":"mains.4cf30bfb.js","sourceRoot":"../src","sourcesContent":["const generator = (() => {\n  const htmlEls = {\n    quote: document.getElementById(\"quote\"),\n    author: document.getElementById(\"author\"),\n    reload: document.getElementById(\"reload\"),\n  };\n\n  const getData = async () => {\n    const url = `https://type.fit/api/quotes`;\n    const proxyurl = `https://cors-anywhere.herokuapp.com/`;\n    return fetch(proxyurl + url, (data = {}), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application / json, text / plain, */*\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .catch((error) => {\n        console.log(error.status);\n      });\n  };\n\n  const randomNum = (max, min) => {\n    // Math.random returns a floating point between 0 & 1\n    let num = Math.round(Math.random() * (max - min) + min);\n    return num;\n  };\n\n  const searchAuthor = (name, data) => {\n    // let regex = new RegExp(name, \"i\");\n    let quotes = [];\n    data.forEach((quote) => {\n      if (quote.author !== null && quote.author.indexOf(name) !== -1) {\n        quotes.push(quote);\n      }\n    });\n    return displayQuote(quotes[randomNum(quotes.length - 1, 0)], quotes);\n  };\n\n  const displayQuote = (quote, data) => {\n    htmlEls.quote.textContent = quote.text;\n    htmlEls.author.textContent = quote.author ? quote.author : \"Unknown\";\n    htmlEls.author.addEventListener(\"click\", () =>\n      searchAuthor(quote.author, data)\n    );\n  };\n\n  const randomQuote = async () => {\n    const data = await getData();\n    let max = data.length;\n    let random = data[randomNum(max, 0)];\n    displayQuote(random, data);\n  };\n\n  htmlEls.reload.addEventListener(\"click\", randomQuote);\n  randomQuote();\n})();\n"]}